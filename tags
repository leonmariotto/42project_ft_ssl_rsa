!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/leon/42project_ft_ssl_rsa/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$(LIBFT)	Makefile	/^$(LIBFT):$/;"	t
$(NAME)	Makefile	/^$(NAME): $(LIBFT) $(OBJ)$/;"	t
$(NAME)	libft/Makefile	/^$(NAME): $(OBJ)$/;"	t
%.o	Makefile	/^%.o: %.c $(HDR) Makefile$/;"	t
%.o	libft/Makefile	/^%.o: %.c $(HDR)$/;"	t
BASE64_H	inc/base64.h	/^# define BASE64_H$/;"	d
CC	Makefile	/^CC ?= clang9$/;"	m
CC	libft/Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS ?= -Wall -Wextra -Werror -g3$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
CONSTS_BASE64_H	inc/consts_base64.h	/^# define CONSTS_BASE64_H$/;"	d
CONSTS_DES_H	inc/consts_des.h	/^# define CONSTS_DES_H$/;"	d
CONSTS_MD5_H	inc/consts_md5.h	/^# define CONSTS_MD5_H$/;"	d
CONSTS_SHA256_H	inc/consts_sha256.h	/^# define CONSTS_SHA256_H$/;"	d
DES_H	inc/des.h	/^# define DES_H$/;"	d
DIGEST_H	inc/digest.h	/^# define DIGEST_H$/;"	d
DISP_CMD_H	inc/disp_cmd.h	/^# define DISP_CMD_H$/;"	d
FALSE	libft/libft.h	/^# define FALSE	/;"	d
FT_SSL_H	inc/ft_ssl.h	/^# define FT_SSL_H$/;"	d
HDR	Makefile	/^HDR := libft\/libft.h	$/;"	m
HDR	libft/Makefile	/^HDR = libft.h, get_next_line.h$/;"	m
HDRDIR	Makefile	/^HDRDIR := inc\/$/;"	m
Kmd5	inc/consts_md5.h	/^const unsigned int Kmd5[] = {$/;"	v	typeref:typename:const unsigned int[]
Ksha256	inc/consts_sha256.h	/^const unsigned int Ksha256[] = {0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,$/;"	v	typeref:typename:const unsigned int[]
LIBDIR	Makefile	/^LIBDIR := libft\/$/;"	m
LIBFT	Makefile	/^LIBFT := libft\/libft.a$/;"	m
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
LIBS	Makefile	/^LIBS := $(LIBFT)$/;"	m
MD5_H	inc/md5.h	/^# define MD5_H$/;"	d
NAME	Makefile	/^NAME := ft_ssl$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
OBJ	Makefile	/^OBJ := $(SRC:.c=.o)$/;"	m
OBJ	libft/Makefile	/^OBJ = $(SRC:.c=.o)$/;"	m
RSA_H	inc/rsa.h	/^# define RSA_H$/;"	d
Rmd5	inc/consts_md5.h	/^const unsigned int Rmd5[] = {$/;"	v	typeref:typename:const unsigned int[]
S1	inc/consts_des.h	/^const int S1[] = {14,  4, 13,  1,  2, 15, 11,  8,  3, 10,  6, 12,  5,  9,  0,  7,$/;"	v	typeref:typename:const int[]
S2	inc/consts_des.h	/^const int S2[] = {15,  1,  8, 14,  6, 11,  3,  4,  9,  7,  2, 13, 12,  0,  5, 10,$/;"	v	typeref:typename:const int[]
S3	inc/consts_des.h	/^const int S3[] = {10,  0,  9, 14,  6,  3, 15,  5,  1, 13, 12,  7, 11,  4,  2,  8,$/;"	v	typeref:typename:const int[]
S4	inc/consts_des.h	/^const int S4[] = { 7, 13, 14,  3,  0,  6,  9, 10,  1,  2,  8,  5, 11, 12,  4, 15,$/;"	v	typeref:typename:const int[]
S5	inc/consts_des.h	/^const int S5[] = { 2, 12,  4,  1,  7, 10, 11,  6,  8,  5,  3, 15, 13,  0, 14,  9,$/;"	v	typeref:typename:const int[]
S6	inc/consts_des.h	/^const int S6[] = {12,  1, 10, 15,  9,  2,  6,  8,  0, 13,  3,  4, 14,  7,  5, 11,$/;"	v	typeref:typename:const int[]
S7	inc/consts_des.h	/^const int S7[] = { 4, 11,  2, 14, 15,  0,  8, 13,  3, 12,  9,  7,  5, 10,  6,  1,$/;"	v	typeref:typename:const int[]
S8	inc/consts_des.h	/^const int S8[] = {13,  2,  8,  4,  6, 15, 11,  1, 10,  9,  3, 14,  5,  0, 12,  7,$/;"	v	typeref:typename:const int[]
SHA256_BLOCK_LENGHT	src/des-common/pbkdf2.c	/^# define SHA256_BLOCK_LENGHT /;"	d	file:
SHA256_DIGEST_LENGHT	src/des-common/pbkdf2.c	/^# define SHA256_DIGEST_LENGHT /;"	d	file:
SHA256_H	inc/sha256.h	/^# define SHA256_H$/;"	d
SRC	Makefile	/^SRC := src\/main.c \\$/;"	m
SRC	libft/Makefile	/^SRC =	ft_putstr.c\\$/;"	m
STDERR	libft/libft.h	/^# define STDERR	/;"	d
STDIN	libft/libft.h	/^# define STDIN	/;"	d
STDOUT	libft/libft.h	/^# define STDOUT	/;"	d
TRUE	libft/libft.h	/^# define TRUE	/;"	d
a	inc/des.h	/^    char        a;$/;"	m	struct:s_desopt	typeref:typename:char
add_mod	src/rsa-common/gen_prime.c	/^uint64_t		add_mod(uint64_t a, uint64_t b, uint64_t mod)$/;"	f	typeref:typename:uint64_t
all	Makefile	/^all: $(NAME) $/;"	t
all	libft/Makefile	/^all: $(NAME)$/;"	t
ask_paswd	src/des-common/ask_paswd.c	/^int                 ask_paswd(char **ptr)$/;"	f	typeref:typename:int
asn_deserialize	src/asn1/asn_deserializer.c	/^int				asn_deserialize(t_list *top, bool pub,$/;"	f	typeref:typename:int
asn_serialize	src/asn1/asn_serializer.c	/^int				asn_serialize(char *buf, int len, t_list **top)$/;"	f	typeref:typename:int
asn_serialize_struct	src/asn1/asn_serializer_struct.c	/^int				asn_serialize_struct(char *buf, int len, t_rsa_key *key)$/;"	f	typeref:typename:int
b64_isvalidchar	src/base64/base64.c	/^int b64_isvalidchar(char c)$/;"	f	typeref:typename:int
b64_parse_input	src/base64/base64.c	/^int                 b64_parse_input(const char *oinput, char **input, int *len)$/;"	f	typeref:typename:int
b64_parse_len	src/base64/base64.c	/^int                 b64_parse_len(const char *input, int len)$/;"	f	typeref:typename:int
b64chars	inc/consts_base64.h	/^const char  b64chars[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ\\$/;"	v	typeref:typename:const char[]
b64invs	inc/consts_base64.h	/^const int   b64invs[] = { 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58,$/;"	v	typeref:typename:const int[]
base64	src/base64/base64.c	/^int                 base64(void **ptr, const unsigned char *input, int *len, char mod)$/;"	f	typeref:typename:int
base64_decrypt	src/base64/base64.c	/^int                 base64_decrypt(void **ptr, const u_int8_t *oinput,$/;"	f	typeref:typename:int
base64_encrypt	src/base64/base64.c	/^int                 base64_encrypt(void **ptr, const unsigned char *input, int *len)$/;"	f	typeref:typename:int
base64_get_opt	src/base64/run_base64.c	/^int         base64_get_opt(char **av, int ac)$/;"	f	typeref:typename:int
base64_parse_opt	src/base64/run_base64.c	/^int         base64_parse_opt(char **av, int *i)$/;"	f	typeref:typename:int
base_size	libft/ft_atoibase.c	/^static int		base_size(const char *base)$/;"	f	typeref:typename:int	file:
base_size	libft/ft_itoabase.c	/^static int	base_size(const char *base)$/;"	f	typeref:typename:int	file:
blockey_final_permutation	src/des-common/des_blockey.c	/^char            *blockey_final_permutation(char *buf)$/;"	f	typeref:typename:char *
blockey_final_permutation	src/des-common/nbloc.c	/^char            *blockey_final_permutation(char *buf)$/;"	f	typeref:typename:char *
blockey_init_permutation	src/des-common/des_blockey.c	/^void                    blockey_init_permutation(unsigned char *buf)$/;"	f	typeref:typename:void
blockey_init_permutation	src/des-common/nbloc.c	/^void                    blockey_init_permutation(unsigned char *buf)$/;"	f	typeref:typename:void
blockey_msg_exp	src/des-common/des_blockey.c	/^char                *blockey_msg_exp(int i, char *buf, t_keyring *keys)$/;"	f	typeref:typename:char *
blockey_msg_exp	src/des-common/nbloc.c	/^char                *blockey_msg_exp(int i, char *buf, t_keyring *keys, char r_exp[6])$/;"	f	typeref:typename:char *
blockey_msg_shift_exp	src/des-common/des_blockey.c	/^char                *blockey_msg_shift_exp(char *r_exp)$/;"	f	typeref:typename:char *
blockey_msg_shift_exp	src/des-common/nbloc.c	/^char                *blockey_msg_shift_exp(char r_exp[6], char ser[4])$/;"	f	typeref:typename:char *
blockey_rpbox	src/des-common/des_blockey.c	/^char                *blockey_rpbox(char *ser)$/;"	f	typeref:typename:char *
blockey_rpbox	src/des-common/nbloc.c	/^char                *blockey_rpbox(char ser[4], char rpox[4])$/;"	f	typeref:typename:char *
build_msg	src/md5/build_msg.c	/^u_int64_t        build_msg(char **pmsg, char *msg, u_int64_t len, int invert)$/;"	f	typeref:typename:u_int64_t
build_msg	src/sha256/build_msg.c	/^u_int64_t        build_msg(char **pmsg, char *msg, u_int64_t len, int invert)$/;"	f	typeref:typename:u_int64_t
check	inc/rsa.h	/^	bool		check;$/;"	m	struct:s_rsa_opt	typeref:typename:bool
check_des_encryption	src/rsa-common/rsa_keyextract.c	/^int			check_des_encryption(uint8_t **input, int *len, uint8_t **salt)$/;"	f	typeref:typename:int
check_key	src/rsa/run_rsa.c	/^int			check_key(t_list *top)$/;"	f	typeref:typename:int
clean	Makefile	/^clean:$/;"	t
clean	libft/Makefile	/^clean:$/;"	t
cmd	inc/disp_cmd.h	/^    const char      *cmd;$/;"	m	struct:s_func	typeref:typename:const char *
cmd_usage	src/exec_cmd.c	/^void        cmd_usage(char *unknow_cmd)$/;"	f	typeref:typename:void
cmpcase	libft/ft_strcmp_casinsens.c	/^static int	cmpcase(char c1, char c2)$/;"	f	typeref:typename:int	file:
coefficient	inc/rsa.h	/^	uint32_t	coefficient;$/;"	m	struct:s_rsa_key	typeref:typename:uint32_t
compression_main_loop	src/sha256/sha256.c	/^void        compression_main_loop(u_int32_t *w, u_int32_t *wvars)$/;"	f	typeref:typename:void
compute_w	src/sha256/sha256.c	/^void        compute_w(u_int32_t *w, char *buf)$/;"	f	typeref:typename:void
content	inc/rsa.h	/^	uint8_t		*content;$/;"	m	struct:s_asn_obj	typeref:typename:uint8_t *
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list	typeref:typename:void *
content_size	libft/libft.h	/^	size_t			content_size;$/;"	m	struct:s_list	typeref:typename:size_t
count_letters	libft/ft_strsplit.c	/^static int	count_letters(const char *s, char c)$/;"	f	typeref:typename:int	file:
count_words	libft/ft_strsplit.c	/^static int	count_words(const char *s, char c)$/;"	f	typeref:typename:int	file:
d	inc/base64.h	/^    int     d;$/;"	m	struct:s_base64opt	typeref:typename:int
d	inc/des.h	/^    char        d;$/;"	m	struct:s_desopt	typeref:typename:char
decode_integer	src/asn1/asn_serializer.c	/^int				decode_integer(uint8_t *buf, t_asn_obj *obj)$/;"	f	typeref:typename:int
decode_integer_struct	src/asn1/asn_serializer_struct.c	/^int				decode_integer_struct(uint8_t *buf, t_rsa_key *key, int counter)$/;"	f	typeref:typename:int
decode_sequence	src/asn1/asn_serializer.c	/^int				decode_sequence(uint8_t *buf, t_list **top)$/;"	f	typeref:typename:int
decode_sequence_struct	src/asn1/asn_serializer_struct.c	/^int				decode_sequence_struct(uint8_t *buf, t_rsa_key *key)$/;"	f	typeref:typename:int
decrypt	inc/rsa.h	/^	bool		decrypt;$/;"	m	struct:s_rsautl_opt	typeref:typename:bool
default_del	libft/default_del.c	/^void	default_del(void *content, size_t content_size)$/;"	f	typeref:typename:void
des3_cbc	src/des3-cbc/des3-cbc.c	/^int                 des3_cbc(void **ptr, const unsigned char *input, int *len, char mod)$/;"	f	typeref:typename:int
des3_cbc_decrypt	src/des3-cbc/des3-cbc.c	/^int                 des3_cbc_decrypt(void **ptr, const unsigned char *input, int *len)$/;"	f	typeref:typename:int
des3_cbc_encrypt	src/des3-cbc/des3-cbc.c	/^int                 des3_cbc_encrypt(void **ptr, const unsigned char *input, int *len)$/;"	f	typeref:typename:int
des3_ecb	src/des3-ecb/des3-ecb.c	/^int                 des3_ecb(void **ptr, const unsigned char *input, int *len, char mod)$/;"	f	typeref:typename:int
des3_ecb_decrypt	src/des3-ecb/des3-ecb.c	/^int                 des3_ecb_decrypt(void **ptr, const unsigned char *input, int *len)$/;"	f	typeref:typename:int
des3_ecb_encrypt	src/des3-ecb/des3-ecb.c	/^int                 des3_ecb_encrypt(void **ptr, const unsigned char *input, int *len)$/;"	f	typeref:typename:int
des_blockey	src/des-common/des_blockey.c	/^char                    *des_blockey(char *buf, char mod, t_keyring *keys)$/;"	f	typeref:typename:char *
des_blockey	src/des-common/nbloc.c	/^char                    *des_blockey(char *buf, char mod, t_keyring *keys)$/;"	f	typeref:typename:char *
des_blockey_pass	src/des-common/des_blockey.c	/^int                 des_blockey_pass(int i, char *buf, t_keyring *keys)$/;"	f	typeref:typename:int
des_blockey_pass	src/des-common/nbloc.c	/^int                 des_blockey_pass(int i, char *buf, t_keyring *keys)$/;"	f	typeref:typename:int
des_cbc	inc/rsa.h	/^	bool		des_cbc;$/;"	m	struct:s_rsa_opt	typeref:typename:bool
des_cbc	src/des-cbc/des-cbc.c	/^int             des_cbc(void **ptr, const unsigned char *input, int *len, char mod)$/;"	f	typeref:typename:int
des_cbc_decrypt	src/des-cbc/des-cbc.c	/^int             des_cbc_decrypt(void **ptr, const unsigned char *input, int *len)$/;"	f	typeref:typename:int
des_cbc_encrypt	src/des-cbc/des-cbc.c	/^int             des_cbc_encrypt(void **ptr, const unsigned char *input, int *len)$/;"	f	typeref:typename:int
des_ecb	inc/rsa.h	/^	bool		des_ecb;$/;"	m	struct:s_rsa_opt	typeref:typename:bool
des_ecb	src/des-ecb/des-ecb.c	/^int                 des_ecb(void **ptr, const unsigned char *input, int *len, char mod)$/;"	f	typeref:typename:int
des_ecb_decrypt	src/des-ecb/des-ecb.c	/^int                 des_ecb_decrypt(void **ptr, const unsigned char *input, int *len)$/;"	f	typeref:typename:int
des_ecb_encrypt	src/des-ecb/des-ecb.c	/^int                 des_ecb_encrypt(void **ptr, const unsigned char *input, int *len)$/;"	f	typeref:typename:int
des_get_opt	src/des-common/des_getopt.c	/^int         des_get_opt(char **av, int ac)$/;"	f	typeref:typename:int
des_parse_opt	src/des-common/des_getopt.c	/^int         des_parse_opt(char **av, int *i)$/;"	f	typeref:typename:int
enc_algo_id	inc/rsa.h	/^	uint8_t		enc_algo_id;$/;"	m	struct:s_key_hdr	typeref:typename:uint8_t
encode_integer	src/asn1/serialize.c	/^int				encode_integer(uint8_t *i, int len, uint8_t *buf)$/;"	f	typeref:typename:int
encode_integer	src/genrsa/run_genrsa.c	/^int				encode_integer(uint8_t *j, uint8_t *buf, int len, uint8_t add)$/;"	f	typeref:typename:int
err_return	libft/err_return.c	/^int			err_return(char *str)$/;"	f	typeref:typename:int
euclide	src/rsa-common/gcd.c	/^uint32_t			euclide(uint32_t a, uint32_t b)$/;"	f	typeref:typename:uint32_t
exec_cmd	src/exec_cmd.c	/^int         exec_cmd(char **av, int ac)$/;"	f	typeref:typename:int
exit_base64	src/base64/exit_base64.c	/^void            exit_base64(void)$/;"	f	typeref:typename:void
exit_des3_cbc	src/des3-cbc/run_des3-cbc.c	/^void            exit_des3_cbc(void)$/;"	f	typeref:typename:void
exit_des3_ecb	src/des3-ecb/run_des3-ecb.c	/^void            exit_des3_ecb(void)$/;"	f	typeref:typename:void
exit_des_cbc	src/des-cbc/run_des-cbc.c	/^void            exit_des_cbc(void)$/;"	f	typeref:typename:void
exit_des_ecb	src/des-ecb/run_des-ecb.c	/^void            exit_des_ecb(void)$/;"	f	typeref:typename:void
exponent1	inc/rsa.h	/^	uint32_t	exponent1;$/;"	m	struct:s_rsa_key	typeref:typename:uint32_t
exponent2	inc/rsa.h	/^	uint32_t	exponent2;$/;"	m	struct:s_rsa_key	typeref:typename:uint32_t
f	inc/disp_cmd.h	/^    int             (*f)(char **av, int ac);$/;"	m	struct:s_func	typeref:typename:int (*)(char ** av,int ac)
fclean	Makefile	/^fclean: clean$/;"	t
fclean	libft/Makefile	/^fclean: clean$/;"	t
file_loop	src/md5/run_md5.c	/^int         file_loop(char **av, int i)$/;"	f	typeref:typename:int
files	inc/digest.h	/^    t_list  *files;$/;"	m	struct:s_opt	typeref:typename:t_list *
free_split	libft/ft_strsplit.c	/^static char	**free_split(char **split, int stop)$/;"	f	typeref:typename:char **	file:
ft_ahextovbin	libft/ft_ahextovbin.c	/^u_int8_t    *ft_ahextovbin(char *str, int len)$/;"	f	typeref:typename:u_int8_t *
ft_arrdup	libft/ft_arrdup.c	/^void	**ft_arrdup(void **arr, const size_t content_size)$/;"	f	typeref:typename:void **
ft_arrdup_str	libft/ft_arrdup_str.c	/^char	**ft_arrdup_str(char **arr)$/;"	f	typeref:typename:char **
ft_arrfree	libft/ft_arrfree.c	/^void	ft_arrfree(void **arr)$/;"	f	typeref:typename:void
ft_arrinsert	libft/ft_arrinsert.c	/^void	**ft_arrinsert(void **arr, void *element)$/;"	f	typeref:typename:void **
ft_arrlen	libft/ft_arrlen.c	/^size_t	ft_arrlen(void **arr)$/;"	f	typeref:typename:size_t
ft_arrremove	libft/ft_arrremove.c	/^void	**ft_arrremove(void **arr, const size_t index)$/;"	f	typeref:typename:void **
ft_arrtolst	libft/ft_arrtolst.c	/^t_list			*ft_arrtolst(char **arr)$/;"	f	typeref:typename:t_list *
ft_atoi	libft/ft_atoi.c	/^int				ft_atoi(const char *str)$/;"	f	typeref:typename:int
ft_atoibase	libft/ft_atoibase.c	/^int				ft_atoibase(const char *s, const char *base)$/;"	f	typeref:typename:int
ft_bswap_uint32	libft/ft_bswap_uint32.c	/^u_int32_t   ft_bswap_uint32(u_int32_t i)$/;"	f	typeref:typename:u_int32_t
ft_bswap_uint64	libft/ft_bswap_uint64.c	/^u_int64_t	ft_bswap_uint64(u_int64_t x)$/;"	f	typeref:typename:u_int64_t
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f	typeref:typename:void
ft_factorial	libft/ft_factorial.c	/^int	ft_factorial(int n)$/;"	f	typeref:typename:int
ft_fibonacci	libft/ft_fibonacci.c	/^int	ft_fibonacci(int n)$/;"	f	typeref:typename:int
ft_get_filename	libft/ft_get_filename.c	/^char	*ft_get_filename(const char *path)$/;"	f	typeref:typename:char *
ft_intlen	libft/ft_intlen.c	/^size_t	ft_intlen(const int n)$/;"	f	typeref:typename:size_t
ft_is_lendian	libft/ft_is_lendian.c	/^int             ft_is_lendian(void)$/;"	f	typeref:typename:int
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f	typeref:typename:int
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f	typeref:typename:int
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f	typeref:typename:int
ft_isblank	libft/ft_isblank.c	/^int	ft_isblank(int c)$/;"	f	typeref:typename:int
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f	typeref:typename:int
ft_islower	libft/ft_islower.c	/^int	ft_islower(int c)$/;"	f	typeref:typename:int
ft_isprime	src/rsa-common/gen_prime.c	/^bool				ft_isprime(uint32_t nb, uint32_t iter, int randomfd, bool verb)$/;"	f	typeref:typename:bool
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f	typeref:typename:int
ft_isspace	libft/ft_isspace.c	/^int	ft_isspace(const char c)$/;"	f	typeref:typename:int
ft_isupper	libft/ft_isupper.c	/^int	ft_isupper(int c)$/;"	f	typeref:typename:int
ft_itoa	libft/ft_itoa.c	/^char			*ft_itoa(int n)$/;"	f	typeref:typename:char *
ft_itoa_fill	libft/ft_itoa.c	/^static void		ft_itoa_fill(int n, char *buff, size_t len)$/;"	f	typeref:typename:void	file:
ft_itoabase	libft/ft_itoabase.c	/^char		*ft_itoabase(int n, const char *base)$/;"	f	typeref:typename:char *
ft_last_char	libft/ft_last_char.c	/^char	ft_last_char(const char *str)$/;"	f	typeref:typename:char
ft_leftrotate32	libft/ft_leftrotate32.c	/^u_int32_t         ft_leftrotate32(u_int32_t x, char c)$/;"	f	typeref:typename:u_int32_t
ft_lstadd	libft/ft_lstadd.c	/^void	ft_lstadd(t_list **alst, t_list *new)$/;"	f	typeref:typename:void
ft_lstback	libft/ft_lstback.c	/^t_list	*ft_lstback(t_list *lst)$/;"	f	typeref:typename:t_list *
ft_lstdel	libft/ft_lstdel.c	/^void	ft_lstdel(t_list **alst, void (*del)(void*, size_t))$/;"	f	typeref:typename:void
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list **alst, void (*del)(void*, size_t))$/;"	f	typeref:typename:void
ft_lstget	libft/ft_lstget.c	/^t_list	*ft_lstget(t_list *lst, const size_t index)$/;"	f	typeref:typename:t_list *
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(t_list *elem))$/;"	f	typeref:typename:void
ft_lstmap	libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, t_list *(*f)(t_list *elem))$/;"	f	typeref:typename:t_list *
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void const *content, size_t content_size)$/;"	f	typeref:typename:t_list *
ft_lstnew_nodup	libft/ft_lstnew_nodup.c	/^t_list	*ft_lstnew_nodup(void *content, size_t content_size)$/;"	f	typeref:typename:t_list *
ft_lstpush	libft/ft_lstpush.c	/^void	ft_lstpush(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstrev	libft/ft_lstrev.c	/^void		ft_lstrev(t_list **lst)$/;"	f	typeref:typename:void
ft_lstsize	libft/ft_lstsize.c	/^size_t	ft_lstsize(const t_list *lst)$/;"	f	typeref:typename:size_t
ft_lsttoarr	libft/ft_lsttoarr.c	/^char			**ft_lsttoarr(t_list *lst)$/;"	f	typeref:typename:char **
ft_max	libft/ft_max.c	/^int	ft_max(const int i, const int j)$/;"	f	typeref:typename:int
ft_memalloc	libft/ft_memalloc.c	/^void	*ft_memalloc(size_t size)$/;"	f	typeref:typename:void *
ft_memccpy	libft/ft_memccpy.c	/^void	*ft_memccpy(void *dst, const void *src, int c, size_t n)$/;"	f	typeref:typename:void *
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f	typeref:typename:int
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memcpy_inv	libft/ft_memcpy_inv.c	/^int				ft_memcpy_inv(void *dst, void *src, int size)$/;"	f	typeref:typename:int
ft_memdel	libft/ft_memdel.c	/^void	ft_memdel(void **ap)$/;"	f	typeref:typename:void
ft_memdup	libft/ft_memdup.c	/^void                *ft_memdup(char *src, int n)$/;"	f	typeref:typename:void *
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f	typeref:typename:void *
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f	typeref:typename:void *
ft_min	libft/ft_min.c	/^int	ft_min(const int i, const int j)$/;"	f	typeref:typename:int
ft_openfile	libft/ft_openfile.c	/^int             ft_openfile(char *file, int mod)$/;"	f	typeref:typename:int
ft_path_merge	libft/ft_path_merge.c	/^char	*ft_path_merge(const char *p1, const char *p2)$/;"	f	typeref:typename:char *
ft_pow	libft/ft_pow.c	/^int	ft_pow(int n, unsigned int factor)$/;"	f	typeref:typename:int
ft_putchar	libft/ft_putchar.c	/^void	ft_putchar(char c)$/;"	f	typeref:typename:void
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f	typeref:typename:void
ft_putendl	libft/ft_putendl.c	/^void	ft_putendl(char const *s)$/;"	f	typeref:typename:void
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char const *s, int fd)$/;"	f	typeref:typename:void
ft_puthexlen	libft/ft_puthexlen.c	/^void        ft_puthexlen(unsigned char *bin, int len)$/;"	f	typeref:typename:void
ft_putnbr	libft/ft_putnbr.c	/^void	ft_putnbr(int n)$/;"	f	typeref:typename:void
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f	typeref:typename:void
ft_putnstr	libft/ft_putnstr.c	/^void	ft_putnstr(int n, ...)$/;"	f	typeref:typename:void
ft_putnstr_fd	libft/ft_putnstr_fd.c	/^void	ft_putnstr_fd(int fd, int n, ...)$/;"	f	typeref:typename:void
ft_putstr	libft/ft_putstr.c	/^void	ft_putstr(char const *s)$/;"	f	typeref:typename:void
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char const *s, int fd)$/;"	f	typeref:typename:void
ft_putu8_hex_fd	libft/ft_put_u8hex_fd.c	/^void			ft_putu8_hex_fd(uint8_t n, int fd)$/;"	f	typeref:typename:void
ft_putu_fd	src/rsa-common/print_utils.c	/^void	ft_putu_fd(uint32_t n, int fd)$/;"	f	typeref:typename:void
ft_putulong_fd	src/rsa-common/print_utils.c	/^void	ft_putulong_fd(uint64_t n, int fd)$/;"	f	typeref:typename:void
ft_readfd	libft/ft_readfd.c	/^int        ft_readfd(int fd, char **msg)$/;"	f	typeref:typename:int
ft_rightrotate32	libft/ft_rightrotate32.c	/^u_int32_t         ft_rightrotate32(u_int32_t x, char c)$/;"	f	typeref:typename:u_int32_t
ft_sort	libft/ft_sort.c	/^void	ft_sort(void **arr, size_t size, int (*f)(void*, void*))$/;"	f	typeref:typename:void
ft_sqrt	libft/ft_sqrt.c	/^int	ft_sqrt(int n)$/;"	f	typeref:typename:int
ft_strcat	libft/ft_strcat.c	/^char	*ft_strcat(char *s1, const char *s2)$/;"	f	typeref:typename:char *
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strclr	libft/ft_strclr.c	/^void	ft_strclr(char *s)$/;"	f	typeref:typename:void
ft_strcmp	libft/ft_strcmp.c	/^int	ft_strcmp(const char *s1, const char *s2)$/;"	f	typeref:typename:int
ft_strcmpcase	libft/ft_strcmp_casinsens.c	/^int			ft_strcmpcase(const char *s1, const char *s2)$/;"	f	typeref:typename:int
ft_strcpy	libft/ft_strcpy.c	/^char	*ft_strcpy(char *dst, const char *src)$/;"	f	typeref:typename:char *
ft_strdel	libft/ft_strdel.c	/^void	ft_strdel(char **as)$/;"	f	typeref:typename:void
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f	typeref:typename:char *
ft_strequ	libft/ft_strequ.c	/^int	ft_strequ(char const *s1, char const *s2)$/;"	f	typeref:typename:int
ft_striter	libft/ft_striter.c	/^void	ft_striter(char *s, void (*f)(char*))$/;"	f	typeref:typename:void
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f	typeref:typename:void
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f	typeref:typename:char *
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f	typeref:typename:size_t
ft_strmap	libft/ft_strmap.c	/^char	*ft_strmap(char const *s, char (*f)(char))$/;"	f	typeref:typename:char *
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f	typeref:typename:char *
ft_strncat	libft/ft_strncat.c	/^char	*ft_strncat(char *s1, const char *s2, size_t len)$/;"	f	typeref:typename:char *
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f	typeref:typename:int
ft_strncpy	libft/ft_strncpy.c	/^char	*ft_strncpy(char *dst, const char *src, size_t len)$/;"	f	typeref:typename:char *
ft_strndup	libft/ft_strndup.c	/^char	*ft_strndup(const char *s, size_t n)$/;"	f	typeref:typename:char *
ft_strnequ	libft/ft_strnequ.c	/^int	ft_strnequ(char const *s1, char const *s2, size_t n)$/;"	f	typeref:typename:int
ft_strnew	libft/ft_strnew.c	/^char	*ft_strnew(size_t size)$/;"	f	typeref:typename:char *
ft_strnjoin	libft/ft_strnjoin.c	/^char			*ft_strnjoin(const size_t n, ...)$/;"	f	typeref:typename:char *
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f	typeref:typename:char *
ft_strnulljoin	libft/ft_strnulljoin.c	/^char	*ft_strnulljoin(char const *s1, char const *s2)$/;"	f	typeref:typename:char *
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strrev	libft/ft_strrev.c	/^char	*ft_strrev(char *s)$/;"	f	typeref:typename:char *
ft_strsplit	libft/ft_strsplit.c	/^char		**ft_strsplit(char const *s, char c)$/;"	f	typeref:typename:char **
ft_strstr	libft/ft_strstr.c	/^char	*ft_strstr(const char *haystack, const char *needle)$/;"	f	typeref:typename:char *
ft_strsub	libft/ft_strsub.c	/^char	*ft_strsub(char const *s, unsigned int start, size_t len)$/;"	f	typeref:typename:char *
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s)$/;"	f	typeref:typename:char *
ft_swap	libft/ft_swap.c	/^void	ft_swap(int *a, int *b)$/;"	f	typeref:typename:void
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f	typeref:typename:int
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f	typeref:typename:int
ft_ui32toa_base_len	libft/ft_ui32toa_base_len.c	/^char            *ft_ui32toa_base_len(u_int32_t n, int base, int len)$/;"	f	typeref:typename:char *
ft_ui8toa_base_len	libft/ft_ui8toa_base_len.c	/^char            *ft_ui8toa_base_len(u_int8_t n, int base, int len)$/;"	f	typeref:typename:char *
g_disp_cmd	inc/disp_cmd.h	/^t_func      g_disp_cmd[] = {$/;"	v	typeref:typename:t_func[]
gcd	src/rsa-common/gcd.c	/^uint32_t	gcd(uint32_t a, uint32_t b)$/;"	f	typeref:typename:uint32_t
gcd_extended	src/rsa-common/gcd.c	/^int64_t		gcd_extended(int64_t a, int64_t b, int64_t *u, int64_t *v)$/;"	f	typeref:typename:int64_t
gen_pkey	src/genrsa/run_genrsa.c	/^int				gen_pkey(t_rsa_key *pkey, int randomfd)$/;"	f	typeref:typename:int
gen_prime	src/rsa-common/gen_prime.c	/^uint32_t			gen_prime(int randomfd, bool verb)$/;"	f	typeref:typename:uint32_t
gen_salt	src/des-common/gen_salt.c	/^int                 gen_salt(unsigned char **ptr)$/;"	f	typeref:typename:int
genrsa_getopt	src/genrsa/run_genrsa.c	/^int				genrsa_getopt(t_genrsa_opt *opt, void **av, int ac)$/;"	f	typeref:typename:int
get_base64	src/base64/get_base64.c	/^t_base64        *get_base64(void)$/;"	f	typeref:typename:t_base64 *
get_des	src/des-common/get_des.c	/^t_des           *get_des(void)$/;"	f	typeref:typename:t_des *
get_f	src/md5/md5.c	/^static int         get_f(u_int32_t *vc, u_int32_t *words, u_int32_t i)$/;"	f	typeref:typename:int	file:
get_length	libft/ft_strnjoin.c	/^static size_t	get_length(const size_t n, va_list args)$/;"	f	typeref:typename:size_t	file:
get_md5	src/md5/get_md5.c	/^t_md5           *get_md5(void)$/;"	f	typeref:typename:t_md5 *
get_opt	src/md5/run_md5.c	/^int         get_opt(char **av, int ac)$/;"	f	typeref:typename:int
get_random	src/rsa-common/get_random.c	/^int			get_random(void	*ptr, size_t size, int randomfd)$/;"	f	typeref:typename:int
get_seq_len	src/asn1/asn_deserializer.c	/^uint64_t			get_seq_len(t_list *top, bool pub)$/;"	f	typeref:typename:uint64_t
get_sha256	src/sha256/get_sha256.c	/^t_sha256            *get_sha256(void)$/;"	f	typeref:typename:t_sha256 *
get_value	libft/ft_atoibase.c	/^static long		get_value(char c, int i, int nbase, const char *base)$/;"	f	typeref:typename:long	file:
get_value_from_base	libft/ft_atoibase.c	/^static long		get_value_from_base(char c, const char *base)$/;"	f	typeref:typename:long	file:
half_swap_array	src/asn1/serialize.c	/^void				half_swap_array(uint8_t *buf, int len)$/;"	f	typeref:typename:void
hasher	src/des-common/ossl_pbkdf.c	/^void            *hasher(char *temp, char *passwd, char *salt)$/;"	f	typeref:typename:void *
hexdump	inc/rsa.h	/^	bool		hexdump;$/;"	m	struct:s_rsautl_opt	typeref:typename:bool
hmac_sha256	src/des-common/pbkdf2.c	/^int            hmac_sha256(u_int8_t *asalt, size_t asalt_len, $/;"	f	typeref:typename:int
id	inc/rsa.h	/^	uint8_t		id;$/;"	m	struct:s_asn_obj	typeref:typename:uint8_t
infd	inc/rsa.h	/^	int		infd;$/;"	m	struct:s_rsa_opt	typeref:typename:int
infd	inc/rsa.h	/^	int		infd;$/;"	m	struct:s_rsautl_opt	typeref:typename:int
init_const	src/base64/get_base64.c	/^static void            init_const(t_base64 *base64)$/;"	f	typeref:typename:void	file:
initial_msg_permutation	inc/consts_des.h	/^const int initial_msg_permutation[] =$/;"	v	typeref:typename:const int[]
input	inc/base64.h	/^    int     input;$/;"	m	struct:s_base64opt	typeref:typename:int
input	inc/des.h	/^    int         input;$/;"	m	struct:s_desopt	typeref:typename:int
iter	inc/des.h	/^    unsigned int        iter;$/;"	m	struct:s_desopt	typeref:typename:unsigned int
iv	inc/des.h	/^    u_int8_t        *iv;$/;"	m	struct:s_des	typeref:typename:u_int8_t *
ivmd5	inc/consts_md5.h	/^const int ivmd5[] = {0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476};$/;"	v	typeref:typename:const int[]
ivsha256	inc/consts_sha256.h	/^const unsigned int ivsha256[] = {0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,$/;"	v	typeref:typename:const unsigned int[]
k	inc/des.h	/^    unsigned char    k[8];$/;"	m	struct:s_keyring	typeref:typename:unsigned char[8]
key	inc/des.h	/^    u_int8_t        *key;$/;"	m	struct:s_des	typeref:typename:u_int8_t *
key_store_value	src/asn1/asn_serializer_struct.c	/^void				key_store_value(t_rsa_key *key, uint8_t *buf,$/;"	f	typeref:typename:void
keyfd	inc/rsa.h	/^	int		keyfd;$/;"	m	struct:s_rsautl_opt	typeref:typename:int
keyring	inc/des.h	/^    t_keyring       *keyring;$/;"	m	struct:s_des	typeref:typename:t_keyring *
l	inc/des.h	/^    unsigned char    l[4];$/;"	m	struct:s_keyring	typeref:typename:unsigned char[4]
lcm	src/rsa-common/gcd.c	/^uint64_t	lcm(uint64_t a, uint64_t b)$/;"	f	typeref:typename:uint64_t
len	inc/rsa.h	/^	uint64_t	len;$/;"	m	struct:s_asn_obj	typeref:typename:uint64_t
len_len	inc/rsa.h	/^	uint8_t		len_len; \/\/ si len_len == 2 alors len += 3...$/;"	m	struct:s_asn_obj	typeref:typename:uint8_t
main	src/main.c	/^int			main(int ac, char **av)$/;"	f	typeref:typename:int
md5	src/md5/md5.c	/^unsigned char         *md5(char *msg, int len)$/;"	f	typeref:typename:unsigned char *
md5_by_fd	src/md5/md5_by_fd.c	/^int         md5_by_fd(int fd)$/;"	f	typeref:typename:int
md5_do_ops	src/md5/md5.c	/^unsigned int        *md5_do_ops(char *pmsg, int plen)$/;"	f	typeref:typename:unsigned int *
md5_exit	src/md5/exit.c	/^int         md5_exit(void)$/;"	f	typeref:typename:int
md5_file	src/md5/run_files_loop.c	/^int         md5_file(char *file)$/;"	f	typeref:typename:int
md5_run_files_loop	src/md5/run_files_loop.c	/^int         md5_run_files_loop(void)$/;"	f	typeref:typename:int
md5_run_s_loop	src/md5/run_s_loop.c	/^int             md5_run_s_loop(void)$/;"	f	typeref:typename:int
millerrabin	src/rsa-common/gen_prime.c	/^bool		millerrabin(uint32_t n, uint32_t d, int randomfd)$/;"	f	typeref:typename:bool
modulus	inc/rsa.h	/^	bool		modulus;$/;"	m	struct:s_rsa_opt	typeref:typename:bool
modulus	inc/rsa.h	/^	uint64_t	modulus;$/;"	m	struct:s_rsa_key	typeref:typename:uint64_t
msg_expansion_permutation	inc/consts_des.h	/^const int msg_expansion_permutation[] =$/;"	v	typeref:typename:const int[]
msg_final_permutation	inc/consts_des.h	/^const int msg_final_permutation[] =$/;"	v	typeref:typename:const int[]
msg_right_pbox	inc/consts_des.h	/^const int msg_right_pbox[] =$/;"	v	typeref:typename:const int[]
mult_mod	src/rsa-common/gen_prime.c	/^uint64_t		mult_mod(uint64_t a, uint64_t b, uint64_t mod)$/;"	f	typeref:typename:uint64_t
myprintu	src/rsa-common/print_utils.c	/^void			myprintu(char *str, uint64_t nb)$/;"	f	typeref:typename:void
myprintulong	src/rsa-common/print_utils.c	/^void			myprintulong(char *str, uint64_t nb)$/;"	f	typeref:typename:void
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list *
noout	inc/rsa.h	/^	bool		noout;$/;"	m	struct:s_rsa_opt	typeref:typename:bool
nosalt	inc/des.h	/^    char        nosalt;$/;"	m	struct:s_desopt	typeref:typename:char
open_randomfd	src/rsa-common/get_random.c	/^int			open_randomfd(char *file)$/;"	f	typeref:typename:int
opt	inc/base64.h	/^    t_base64opt         *opt;$/;"	m	struct:s_base64	typeref:typename:t_base64opt *
opt	inc/des.h	/^    t_desopt        *opt;$/;"	m	struct:s_des	typeref:typename:t_desopt *
opt	inc/md5.h	/^    t_opt               *opt;$/;"	m	struct:s_md5	typeref:typename:t_opt *
opt	inc/sha256.h	/^    t_opt               *opt;$/;"	m	struct:s_sha256	typeref:typename:t_opt *
ossl_pbkdf	src/des-common/ossl_pbkdf.c	/^u_int8_t        *ossl_pbkdf(char *passwd, u_int8_t *salt,$/;"	f	typeref:typename:u_int8_t *
outfd	inc/rsa.h	/^	int		outfd;$/;"	m	struct:s_rsa_opt	typeref:typename:int
outfd	inc/rsa.h	/^	int		outfd;$/;"	m	struct:s_rsautl_opt	typeref:typename:int
outfd	inc/rsa.h	/^	int	outfd;$/;"	m	struct:s_genrsa_opt	typeref:typename:int
output	inc/base64.h	/^    int     output;$/;"	m	struct:s_base64opt	typeref:typename:int
output	inc/des.h	/^    int         output;$/;"	m	struct:s_desopt	typeref:typename:int
p	inc/digest.h	/^    int     p;$/;"	m	struct:s_opt	typeref:typename:int
parse_opt	src/md5/run_md5.c	/^int         parse_opt(char **av, int *i)$/;"	f	typeref:typename:int
parse_pem	src/rsa-common/pem.c	/^int			parse_pem(char **input, bool pub, int *len)$/;"	f	typeref:typename:int
pass	inc/rsa.h	/^	char		*pass;$/;"	m	struct:s_rsautl_opt	typeref:typename:char *
passin	inc/rsa.h	/^	char		*passin;$/;"	m	struct:s_rsa_opt	typeref:typename:char *
passout	inc/rsa.h	/^	char		*passout;$/;"	m	struct:s_rsa_opt	typeref:typename:char *
passwd	inc/des.h	/^    char        *passwd;$/;"	m	struct:s_desopt	typeref:typename:char *
pbkdf2	inc/des.h	/^    char                pbkdf2;$/;"	m	struct:s_desopt	typeref:typename:char
pbkdf2	src/des-common/pbkdf2.c	/^int         pbkdf2(char *passwd, size_t pass_len,$/;"	f	typeref:typename:int
pow_mod	src/rsa-common/gen_prime.c	/^uint64_t		pow_mod(uint64_t a, uint64_t b, uint64_t mod)$/;"	f	typeref:typename:uint64_t
prime1	inc/rsa.h	/^	uint32_t	prime1;$/;"	m	struct:s_rsa_key	typeref:typename:uint32_t
prime2	inc/rsa.h	/^	uint32_t	prime2;$/;"	m	struct:s_rsa_key	typeref:typename:uint32_t
print_base64	src/base64/run_base64.c	/^void        print_base64(int fd, char  *output, int len)$/;"	f	typeref:typename:void
print_modulus	src/rsa-common/print_utils.c	/^void			print_modulus(t_list *top)$/;"	f	typeref:typename:void
print_obj	src/rsa-common/print_utils.c	/^void			print_obj(t_asn_obj *obj)$/;"	f	typeref:typename:void
print_opt	src/des-common/print_opt.c	/^void            print_opt(void)$/;"	f	typeref:typename:void
print_priv	src/rsa-common/rsa_printout.c	/^int			print_priv(uint8_t *cyph, int len, uint8_t hdr, int fd)$/;"	f	typeref:typename:int
print_pub	src/rsa-common/rsa_printout.c	/^int			print_pub(uint8_t *cyph, int len, uint8_t hdr, int fd)$/;"	f	typeref:typename:int
print_text	src/rsa-common/print_utils.c	/^void			print_text(t_list *top, t_rsa_opt opt)$/;"	f	typeref:typename:void
print_usage	src/main.c	/^void        print_usage(void)$/;"	f	typeref:typename:void
privateExponent	inc/rsa.h	/^	uint64_t	privateExponent;$/;"	m	struct:s_rsa_key	typeref:typename:uint64_t
process_md5	src/md5/md5.c	/^void         process_md5(char *buf, unsigned int *vars)$/;"	f	typeref:typename:void
process_sha256	src/sha256/sha256.c	/^void        process_sha256(char *buf, unsigned int *vars)$/;"	f	typeref:typename:void
pubin	inc/rsa.h	/^	bool		pubin;$/;"	m	struct:s_rsa_opt	typeref:typename:bool
pubin	inc/rsa.h	/^	bool		pubin;$/;"	m	struct:s_rsautl_opt	typeref:typename:bool
publicExponent	inc/rsa.h	/^	uint32_t	publicExponent;$/;"	m	struct:s_rsa_key	typeref:typename:uint32_t
pubout	inc/rsa.h	/^	bool		pubout;$/;"	m	struct:s_rsa_opt	typeref:typename:bool
q	inc/digest.h	/^    int     q;$/;"	m	struct:s_opt	typeref:typename:int
r	inc/des.h	/^    unsigned char    r[4];$/;"	m	struct:s_keyring	typeref:typename:unsigned char[4]
r	inc/digest.h	/^    int     r;$/;"	m	struct:s_opt	typeref:typename:int
randomfd	inc/rsa.h	/^	int	randomfd;$/;"	m	struct:s_genrsa_opt	typeref:typename:int
re	Makefile	/^re: fclean all$/;"	t
re	libft/Makefile	/^re: fclean all$/;"	t
rsa_decrypt_key	src/rsa-common/rsa_keyextract.c	/^int			rsa_decrypt_key(char **input, int *len, char *paswd, int des, uint8_t *salt)$/;"	f	typeref:typename:int
rsa_deserializer	src/asn1/serialize.c	/^void				rsa_deserializer(t_rsa_key key, uint8_t *buf, bool pub)$/;"	f	typeref:typename:void
rsa_deserializer_genrsa	src/genrsa/run_genrsa.c	/^uint32_t			rsa_deserializer_genrsa(t_rsa_key key, uint8_t *buf, bool pub)$/;"	f	typeref:typename:uint32_t
rsa_extract_key	src/rsa-common/rsa_keyextract.c	/^int			rsa_extract_key(char **input, int *len, bool pub,$/;"	f	typeref:typename:int
rsa_extract_key_struct	src/rsa-common/rsa_keyextract.c	/^int			rsa_extract_key_struct(char **input, int *len, bool pub,$/;"	f	typeref:typename:int
rsa_getopt	src/rsa/getopt.c	/^int			rsa_getopt(t_rsa_opt *opt, void **av, int ac)$/;"	f	typeref:typename:int
rsa_print_out	src/rsa-common/rsa_printout.c	/^int			rsa_print_out(t_list *top, t_rsa_opt opt)$/;"	f	typeref:typename:int
rsa_process	src/rsa/run_rsa.c	/^int			rsa_process(t_list *top, t_rsa_opt opt)$/;"	f	typeref:typename:int
rsa_serializer	src/asn1/serialize.c	/^void				rsa_serializer(t_rsa_key *key, char *buf, bool pub)$/;"	f	typeref:typename:void
rsautl_getopt	src/rsautl/rsautl_getopt.c	/^int			rsautl_getopt(t_rsautl_opt *opt, char **av, int ac)$/;"	f	typeref:typename:int
run_base64	src/base64/run_base64.c	/^int         run_base64(char **av, int ac)$/;"	f	typeref:typename:int
run_des3_cbc	src/des3-cbc/run_des3-cbc.c	/^int             run_des3_cbc(void **av, int ac)$/;"	f	typeref:typename:int
run_des3_ecb	src/des3-ecb/run_des3-ecb.c	/^int             run_des3_ecb(void **av, int ac)$/;"	f	typeref:typename:int
run_des_cbc	src/des-cbc/run_des-cbc.c	/^int             run_des_cbc(void **av, int ac)$/;"	f	typeref:typename:int
run_des_ecb	src/des-ecb/run_des-ecb.c	/^int             run_des_ecb(void **av, int ac)$/;"	f	typeref:typename:int
run_genrsa	src/genrsa/run_genrsa.c	/^int				run_genrsa(void **av, int ac)$/;"	f	typeref:typename:int
run_md5	src/md5/run_md5.c	/^int         run_md5(char **av, int ac)$/;"	f	typeref:typename:int
run_rsa	src/rsa/run_rsa.c	/^int			run_rsa(void **av, int ac)$/;"	f	typeref:typename:int
run_rsautl	src/rsautl/run_rsautl.c	/^int			run_rsautl(char **av, int ac)$/;"	f	typeref:typename:int
run_sha256	src/sha256/run_sha256.c	/^int         run_sha256(char **av, int ac)$/;"	f	typeref:typename:int
s	inc/digest.h	/^    int     s;$/;"	m	struct:s_opt	typeref:typename:int
s_asn_obj	inc/rsa.h	/^typedef struct			s_asn_obj$/;"	s
s_base64	inc/base64.h	/^typedef struct		s_base64 {$/;"	s
s_base64opt	inc/base64.h	/^typedef struct		s_base64opt {$/;"	s
s_des	inc/des.h	/^typedef struct          s_des$/;"	s
s_desopt	inc/des.h	/^typedef struct          s_desopt$/;"	s
s_func	inc/disp_cmd.h	/^typedef struct          s_func {$/;"	s
s_genrsa_opt	inc/rsa.h	/^typedef struct			s_genrsa_opt$/;"	s
s_key_hdr	inc/rsa.h	/^typedef struct			s_key_hdr$/;"	s
s_keyring	inc/des.h	/^typedef struct          s_keyring$/;"	s
s_list	libft/libft.h	/^typedef struct	s_list$/;"	s
s_md5	inc/md5.h	/^typedef struct		s_md5 $/;"	s
s_opt	inc/digest.h	/^typedef struct		s_opt {$/;"	s
s_rsa_key	inc/rsa.h	/^typedef struct			s_rsa_key$/;"	s
s_rsa_opt	inc/rsa.h	/^typedef struct			s_rsa_opt$/;"	s
s_rsautl_opt	inc/rsa.h	/^typedef struct			s_rsautl_opt$/;"	s
s_sha256	inc/sha256.h	/^typedef struct      s_sha256$/;"	s
salt	inc/des.h	/^    u_int8_t        *salt;$/;"	m	struct:s_des	typeref:typename:u_int8_t *
sha256	src/sha256/sha256.c	/^unsigned char         *sha256(char *msg, int len)$/;"	f	typeref:typename:unsigned char *
sha256_by_fd	src/sha256/sha256_by_fd.c	/^int         sha256_by_fd(int fd)$/;"	f	typeref:typename:int
sha256_do_ops	src/sha256/sha256.c	/^unsigned int        *sha256_do_ops(char *pmsg, u_int64_t plen)$/;"	f	typeref:typename:unsigned int *
sha256_exit	src/sha256/exit.c	/^int         sha256_exit(void)$/;"	f	typeref:typename:int
sha256_file	src/sha256/run_files_loop.c	/^int         sha256_file(char *file)$/;"	f	typeref:typename:int
sha256_file_loop	src/sha256/run_sha256.c	/^int         sha256_file_loop(char **av, int i)$/;"	f	typeref:typename:int
sha256_get_opt	src/sha256/run_sha256.c	/^int         sha256_get_opt(char **av, int ac)$/;"	f	typeref:typename:int
sha256_parse_opt	src/sha256/run_sha256.c	/^int         sha256_parse_opt(char **av, int *i)$/;"	f	typeref:typename:int
sha256_run_files_loop	src/sha256/run_files_loop.c	/^int         sha256_run_files_loop(void)$/;"	f	typeref:typename:int
sha256_run_s_loop	src/sha256/run_s_loop.c	/^int             sha256_run_s_loop(void)$/;"	f	typeref:typename:int
str	inc/digest.h	/^    t_list  *str;$/;"	m	struct:s_opt	typeref:typename:t_list *
t_asn_obj	inc/rsa.h	/^}				t_asn_obj;$/;"	t	typeref:struct:s_asn_obj
t_base64	inc/base64.h	/^}		            t_base64;$/;"	t	typeref:struct:s_base64
t_base64opt	inc/base64.h	/^}		            t_base64opt;$/;"	t	typeref:struct:s_base64opt
t_des	inc/des.h	/^}                       t_des;$/;"	t	typeref:struct:s_des
t_desopt	inc/des.h	/^}                       t_desopt;$/;"	t	typeref:struct:s_desopt
t_func	inc/disp_cmd.h	/^}                       t_func;$/;"	t	typeref:struct:s_func
t_genrsa_opt	inc/rsa.h	/^} 				t_genrsa_opt;$/;"	t	typeref:struct:s_genrsa_opt
t_key_hdr	inc/rsa.h	/^} __attribute__((packed)) 	t_key_hdr;$/;"	t	typeref:struct:s_key_hdr
t_keyring	inc/des.h	/^}                       t_keyring;$/;"	t	typeref:struct:s_keyring
t_list	libft/libft.h	/^}				t_list;$/;"	t	typeref:struct:s_list
t_md5	inc/md5.h	/^}		            t_md5;$/;"	t	typeref:struct:s_md5
t_opt	inc/digest.h	/^}		            t_opt;$/;"	t	typeref:struct:s_opt
t_rsa_key	inc/rsa.h	/^} 				t_rsa_key;$/;"	t	typeref:struct:s_rsa_key
t_rsa_opt	inc/rsa.h	/^}				t_rsa_opt;$/;"	t	typeref:struct:s_rsa_opt
t_rsautl_opt	inc/rsa.h	/^}				t_rsautl_opt;$/;"	t	typeref:struct:s_rsautl_opt
t_sha256	inc/sha256.h	/^}                   t_sha256;$/;"	t	typeref:struct:s_sha256
text	inc/rsa.h	/^	bool		text;$/;"	m	struct:s_rsa_opt	typeref:typename:bool
tkey	src/des-common/tkey.c	/^t_keyring                *tkey(unsigned char *key)$/;"	f	typeref:typename:t_keyring *
tkey_compression_permutation	src/des-common/tkey.c	/^const int tkey_compression_permutation[] =$/;"	v	typeref:typename:const int[]
tkey_init_permutation	src/des-common/tkey.c	/^void                tkey_init_permutation(unsigned char *key, t_keyring *ret)$/;"	f	typeref:typename:void
tkey_permutation	src/des-common/tkey.c	/^const int tkey_permutation[] =$/;"	v	typeref:typename:const int[]
tkey_process	src/des-common/tkey.c	/^void                 tkey_process(int i, t_keyring *ret)$/;"	f	typeref:typename:void
tkey_separate	src/des-common/tkey.c	/^void                tkey_separate(t_keyring *ret)$/;"	f	typeref:typename:void
tkey_shifts	src/des-common/tkey.c	/^const int tkey_shifts[] = {-1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1 };$/;"	v	typeref:typename:const int[]
v	inc/des.h	/^    char        v;$/;"	m	struct:s_desopt	typeref:typename:char
